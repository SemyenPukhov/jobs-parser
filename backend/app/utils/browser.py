
import asyncio
from playwright.async_api import async_playwright,  TimeoutError as PlaywrightTimeoutError
# from tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_type
from app.logger import logger
from typing import Optional

MAX_PAGES = 15
browser_semaphore = asyncio.Semaphore(MAX_PAGES)


# @retry(
#     stop=stop_after_attempt(3),
#     wait=wait_exponential(multiplier=1, min=2, max=10),
#     retry=retry_if_exception_type(PlaywrightTimeoutError)
# )
async def fetch_html_browser(url: str, screenshot_path: Optional[str] = None) -> str:
    async with async_playwright() as p:
        logger.info(f"üìä –ó–∞–ø—Ä–∞—à–∏–≤–∞—é HTML: {url}")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è VPS
        browser = await p.chromium.launch(
            headless=True,
            args=[
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-gpu',
                '--no-first-run',
                '--no-default-browser-check',
                '--disable-default-apps'
            ]
        )

        context = await browser.new_context(
            user_agent='Mozilla/5.0 (Linux; x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        )
        page = await context.new_page()

        try:
            await page.goto(url, wait_until="domcontentloaded", timeout=60000)
            await page.wait_for_load_state("networkidle", timeout=10000)
            await page.wait_for_timeout(1000)
        except PlaywrightTimeoutError:
            logger.warning(
                f"‚ö†Ô∏è Timeout –Ω–∞ {url}, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤–æ–∑–º–æ–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç...")

        if screenshot_path:
            try:
                await page.screenshot(path=screenshot_path, full_page=True)
                logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_path}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")

        content = await page.content()
        await context.close()
        await browser.close()
        return content


# @retry(
#     stop=stop_after_attempt(3),
#     wait=wait_exponential(multiplier=1, min=2, max=10),
#     retry=retry_if_exception_type(PlaywrightTimeoutError)
# )
# async def _fetch_html_async(url: str, browser) -> str:
#     # async with async_playwright() as p:
#     logger.info(f"üìä –ó–∞–ø—Ä–∞—à–∏–≤–∞—é HTML: {url}")
#     # browser = await p.chromium.launch(headless=False)
#     page = await browser.new_page()

#     try:
#         await page.goto(url, wait_until="domcontentloaded", timeout=60000)
#         await page.wait_for_load_state("networkidle", timeout=10000)
#         await page.wait_for_timeout(1000)  # –ü–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞
#     except PlaywrightTimeoutError:
#         logger.warning(
#             f"‚ö†Ô∏è Timeout –Ω–∞ {url}, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤–æ–∑–º–æ–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç...")

#     content = await page.content()
#     await browser.close()
#     return content


async def fetch_html_async(url: str, browser) -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–º–æ—â—å—é –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞."""
    async with browser_semaphore:
        page = await browser.new_page()
        try:
            logger.info(f"üåê –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
            await page.goto(url, wait_until="domcontentloaded", timeout=60000)
            await page.wait_for_load_state("networkidle", timeout=10000)
            await page.wait_for_timeout(1000)  # –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
            content = await page.content()
        except PlaywrightTimeoutError:
            logger.warning(
                f"‚ö†Ô∏è Timeout –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url}, –≤–æ–∑–≤—Ä–∞—â–∞—é —á–∞—Å—Ç–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
            content = await page.content()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url}: {e}")
            content = ""
        finally:
            await page.close()
        return content
