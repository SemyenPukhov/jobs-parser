import os
from slack_sdk import WebClient
from slack_sdk.errors import SlackApiError
from app.logger import logger

# –ü–æ–ª—É—á–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
ENV = os.getenv("ENVIRONMENT", "dev").upper()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Slack
slack_token = os.getenv("SLACK_BOT_TOKEN")
slack_channel = os.getenv("SLACK_CHANNEL_ID")

if not slack_token or not slack_channel:
    logger.warning("‚ö†Ô∏è Slack —Ç–æ–∫–µ–Ω –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Slack –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
    client = None
else:
    client = WebClient(token=slack_token)

async def send_slack_message(message: str, blocks: list = None) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Slack –∫–∞–Ω–∞–ª.
    
    Args:
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        blocks: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Slack
    
    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    if not client:
        logger.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Slack, –Ω–æ –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return False

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –æ–∫—Ä—É–∂–µ–Ω–∏—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        prefixed_message = f"[{ENV}] {message}"
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –±–ª–æ–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫ —Ç–µ–∫—Å—Ç—É –≤ –ø–µ—Ä–≤–æ–º –±–ª–æ–∫–µ
        if blocks and len(blocks) > 0 and blocks[0].get("type") == "section":
            if "text" in blocks[0] and "text" in blocks[0]["text"]:
                blocks[0]["text"]["text"] = f"[{ENV}] {blocks[0]['text']['text']}"

        response = client.chat_postMessage(
            channel=slack_channel,
            text=prefixed_message,
            blocks=blocks
        )
        return response["ok"]
    except SlackApiError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Slack: {str(e)}")
        return False

def create_parser_status_block(parser_name: str, status: str, details: str = None) -> list:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–µ—Ä–∞.
    
    Args:
        parser_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
        status: –°—Ç–∞—Ç—É—Å (success/error/in_progress)
        details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
    
    Returns:
        list: –ë–ª–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Slack
    """
    status_emoji = {
        "success": "‚úÖ",
        "error": "‚ùå",
        "in_progress": "üîÑ"
    }.get(status, "‚ÑπÔ∏è")

    blocks = [
        {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": f"{status_emoji} *{parser_name}*\n{details or ''}"
            }
        }
    ]
    
    return blocks 